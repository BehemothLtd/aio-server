type Issue {
  id: ID
  code: String
  title: String
  description: String
  archived: Boolean
  archiveable: Boolean
  issueStatusId: ID
  issueType: String
  priority: String
  status: String
  position: Int

  createdAt: Time
  updatedAt: Time
  deadline: String
  startDate: String

  children: [Issue!]
  parentId: Int
  parent: Issue

  projectId: ID
  project: Project

  creatorId: ID
  creator: User

  issueAssignees: [IssueAssignee!]
  assignees: [User!]

  projectSprintId: ID
  projectSprint: ProjectSprint

  statusColorCode: String
}

type ProjectIssueModification {
  Issue: Issue
}

type SelfRecentTask {
  id: ID
  projectId: ID
  title: String
  assignees: [UserBasicInfo!]
}

input ProjectModifyIssueInput {
  title: String
  description: String
  issueType: String
  priority: String
  archived: Boolean
  deadline: Time
  startDate: Time
  issueStatusId: Int
  parentId: Int
  projectSprintId: Int
  issueAssignees: [IssueAssigneeInput!]
}

type IssueCollection {
  collection: [Issue!]
  metadata: Metadata!
}

input ProjectIssuesQuery {
  titleCont: String
  codeCont: String
  issueTypeEq: String
  deadLineAtGteq: String
  deadLineAtLteq: String
  userIdIn: [Int!]
  # this is special case, '' to remove the condition on projectSprintId, null for NULL SQL search, 'id' for exact projectSprintId search
  projectSprintIdEq: String
}

input IssuesQuery {
  titleCont: String
  codeCont: String
  issueTypeEq: String
  projectIdEq: Int
  deadLineAtGteq: String
  deadLineAtLteq: String
}
