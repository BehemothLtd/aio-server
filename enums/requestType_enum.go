// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strconv"
)

const (
	// RequestTypeDayOff is a RequestType of type day_off.
	RequestTypeDayOff RequestType = "day_off"
	// RequestTypeWfh is a RequestType of type wfh.
	RequestTypeWfh RequestType = "wfh"
	// RequestTypeInsurance is a RequestType of type insurance.
	RequestTypeInsurance RequestType = "insurance"
	// RequestTypePersonalDaysOff is a RequestType of type personal_days_off.
	RequestTypePersonalDaysOff RequestType = "personal_days_off"
)

var ErrInvalidRequestType = errors.New("not a valid RequestType")

// String implements the Stringer interface.
func (x RequestType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RequestType) IsValid() bool {
	_, err := ParseRequestType(string(x))
	return err == nil
}

var _RequestTypeValue = map[string]RequestType{
	"day_off":           RequestTypeDayOff,
	"wfh":               RequestTypeWfh,
	"insurance":         RequestTypeInsurance,
	"personal_days_off": RequestTypePersonalDaysOff,
}

// ParseRequestType attempts to convert a string to a RequestType.
func ParseRequestType(name string) (RequestType, error) {
	if x, ok := _RequestTypeValue[name]; ok {
		return x, nil
	}
	return RequestType(""), fmt.Errorf("%s is %w", name, ErrInvalidRequestType)
}

// MarshalText implements the text marshaller method.
func (x RequestType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RequestType) UnmarshalText(text []byte) error {
	tmp, err := ParseRequestType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errRequestTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

var sqlIntRequestTypeMap = map[int64]RequestType{
	1: RequestTypeDayOff,
	2: RequestTypeWfh,
	3: RequestTypeInsurance,
	4: RequestTypePersonalDaysOff,
}

var sqlIntRequestTypeValue = map[RequestType]int64{
	RequestTypeDayOff:          1,
	RequestTypeWfh:             2,
	RequestTypeInsurance:       3,
	RequestTypePersonalDaysOff: 4,
}

func lookupSqlIntRequestType(val int64) (RequestType, error) {
	x, ok := sqlIntRequestTypeMap[val]
	if !ok {
		return x, fmt.Errorf("%v is not %w", val, ErrInvalidRequestType)
	}
	return x, nil
}

// Scan implements the Scanner interface.
func (x *RequestType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = RequestType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x, err = lookupSqlIntRequestType(v)
	case string:
		*x, err = ParseRequestType(v)
	case []byte:
		if val, verr := strconv.ParseInt(string(v), 10, 64); verr == nil {
			*x, err = lookupSqlIntRequestType(val)
		} else {
			// try parsing the value as a string
			*x, err = ParseRequestType(string(v))
		}
	case RequestType:
		*x = v
	case int:
		*x, err = lookupSqlIntRequestType(int64(v))
	case *RequestType:
		if v == nil {
			return errRequestTypeNilPtr
		}
		*x = *v
	case uint:
		*x, err = lookupSqlIntRequestType(int64(v))
	case uint64:
		*x, err = lookupSqlIntRequestType(int64(v))
	case *int:
		if v == nil {
			return errRequestTypeNilPtr
		}
		*x, err = lookupSqlIntRequestType(int64(*v))
	case *int64:
		if v == nil {
			return errRequestTypeNilPtr
		}
		*x, err = lookupSqlIntRequestType(int64(*v))
	case float64: // json marshals everything as a float64 if it's a number
		*x, err = lookupSqlIntRequestType(int64(v))
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errRequestTypeNilPtr
		}
		*x, err = lookupSqlIntRequestType(int64(*v))
	case *uint:
		if v == nil {
			return errRequestTypeNilPtr
		}
		*x, err = lookupSqlIntRequestType(int64(*v))
	case *uint64:
		if v == nil {
			return errRequestTypeNilPtr
		}
		*x, err = lookupSqlIntRequestType(int64(*v))
	case *string:
		if v == nil {
			return errRequestTypeNilPtr
		}
		*x, err = ParseRequestType(*v)
	default:
		return errors.New("invalid type for RequestType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x RequestType) Value() (driver.Value, error) {
	val, ok := sqlIntRequestTypeValue[x]
	if !ok {
		return nil, ErrInvalidRequestType
	}
	return int64(val), nil
}
