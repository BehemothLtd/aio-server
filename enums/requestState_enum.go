// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strconv"
)

const (
	// RequestStateTypePending is a RequestStateType of type pending.
	RequestStateTypePending RequestStateType = "pending"
	// RequestStateTypeApproved is a RequestStateType of type approved.
	RequestStateTypeApproved RequestStateType = "approved"
	// RequestStateTypeRejected is a RequestStateType of type rejected.
	RequestStateTypeRejected RequestStateType = "rejected"
	// RequestStateTypePersonalDaysOff is a RequestStateType of type personal_days_off.
	RequestStateTypePersonalDaysOff RequestStateType = "personal_days_off"
)

var ErrInvalidRequestStateType = errors.New("not a valid RequestStateType")

// String implements the Stringer interface.
func (x RequestStateType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RequestStateType) IsValid() bool {
	_, err := ParseRequestStateType(string(x))
	return err == nil
}

var _RequestStateTypeValue = map[string]RequestStateType{
	"pending":           RequestStateTypePending,
	"approved":          RequestStateTypeApproved,
	"rejected":          RequestStateTypeRejected,
	"personal_days_off": RequestStateTypePersonalDaysOff,
}

// ParseRequestStateType attempts to convert a string to a RequestStateType.
func ParseRequestStateType(name string) (RequestStateType, error) {
	if x, ok := _RequestStateTypeValue[name]; ok {
		return x, nil
	}
	return RequestStateType(""), fmt.Errorf("%s is %w", name, ErrInvalidRequestStateType)
}

// MarshalText implements the text marshaller method.
func (x RequestStateType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RequestStateType) UnmarshalText(text []byte) error {
	tmp, err := ParseRequestStateType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errRequestStateTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

var sqlIntRequestStateTypeMap = map[int64]RequestStateType{
	1: RequestStateTypePending,
	2: RequestStateTypeApproved,
	3: RequestStateTypeRejected,
	4: RequestStateTypePersonalDaysOff,
}

var sqlIntRequestStateTypeValue = map[RequestStateType]int64{
	RequestStateTypePending:         1,
	RequestStateTypeApproved:        2,
	RequestStateTypeRejected:        3,
	RequestStateTypePersonalDaysOff: 4,
}

func lookupSqlIntRequestStateType(val int64) (RequestStateType, error) {
	x, ok := sqlIntRequestStateTypeMap[val]
	if !ok {
		return x, fmt.Errorf("%v is not %w", val, ErrInvalidRequestStateType)
	}
	return x, nil
}

// Scan implements the Scanner interface.
func (x *RequestStateType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = RequestStateType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x, err = lookupSqlIntRequestStateType(v)
	case string:
		*x, err = ParseRequestStateType(v)
	case []byte:
		if val, verr := strconv.ParseInt(string(v), 10, 64); verr == nil {
			*x, err = lookupSqlIntRequestStateType(val)
		} else {
			// try parsing the value as a string
			*x, err = ParseRequestStateType(string(v))
		}
	case RequestStateType:
		*x = v
	case int:
		*x, err = lookupSqlIntRequestStateType(int64(v))
	case *RequestStateType:
		if v == nil {
			return errRequestStateTypeNilPtr
		}
		*x = *v
	case uint:
		*x, err = lookupSqlIntRequestStateType(int64(v))
	case uint64:
		*x, err = lookupSqlIntRequestStateType(int64(v))
	case *int:
		if v == nil {
			return errRequestStateTypeNilPtr
		}
		*x, err = lookupSqlIntRequestStateType(int64(*v))
	case *int64:
		if v == nil {
			return errRequestStateTypeNilPtr
		}
		*x, err = lookupSqlIntRequestStateType(int64(*v))
	case float64: // json marshals everything as a float64 if it's a number
		*x, err = lookupSqlIntRequestStateType(int64(v))
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errRequestStateTypeNilPtr
		}
		*x, err = lookupSqlIntRequestStateType(int64(*v))
	case *uint:
		if v == nil {
			return errRequestStateTypeNilPtr
		}
		*x, err = lookupSqlIntRequestStateType(int64(*v))
	case *uint64:
		if v == nil {
			return errRequestStateTypeNilPtr
		}
		*x, err = lookupSqlIntRequestStateType(int64(*v))
	case *string:
		if v == nil {
			return errRequestStateTypeNilPtr
		}
		*x, err = ParseRequestStateType(*v)
	default:
		return errors.New("invalid type for RequestStateType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x RequestStateType) Value() (driver.Value, error) {
	val, ok := sqlIntRequestStateTypeValue[x]
	if !ok {
		return nil, ErrInvalidRequestStateType
	}
	return int64(val), nil
}
