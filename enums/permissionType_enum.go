// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strconv"
)

const (
	// PermissionActionTypeAll is a PermissionActionType of type all.
	PermissionActionTypeAll PermissionActionType = "all"
	// PermissionActionTypeRead is a PermissionActionType of type read.
	PermissionActionTypeRead PermissionActionType = "read"
	// PermissionActionTypeWrite is a PermissionActionType of type write.
	PermissionActionTypeWrite PermissionActionType = "write"
	// PermissionActionTypeDelete is a PermissionActionType of type delete.
	PermissionActionTypeDelete PermissionActionType = "delete"
	// PermissionActionTypeChangeState is a PermissionActionType of type change_state.
	PermissionActionTypeChangeState PermissionActionType = "change_state"
)

var ErrInvalidPermissionActionType = errors.New("not a valid PermissionActionType")

// String implements the Stringer interface.
func (x PermissionActionType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PermissionActionType) IsValid() bool {
	_, err := ParsePermissionActionType(string(x))
	return err == nil
}

var _PermissionActionTypeValue = map[string]PermissionActionType{
	"all":          PermissionActionTypeAll,
	"read":         PermissionActionTypeRead,
	"write":        PermissionActionTypeWrite,
	"delete":       PermissionActionTypeDelete,
	"change_state": PermissionActionTypeChangeState,
}

// ParsePermissionActionType attempts to convert a string to a PermissionActionType.
func ParsePermissionActionType(name string) (PermissionActionType, error) {
	if x, ok := _PermissionActionTypeValue[name]; ok {
		return x, nil
	}
	return PermissionActionType(""), fmt.Errorf("%s is %w", name, ErrInvalidPermissionActionType)
}

// MarshalText implements the text marshaller method.
func (x PermissionActionType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PermissionActionType) UnmarshalText(text []byte) error {
	tmp, err := ParsePermissionActionType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errPermissionActionTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

var sqlIntPermissionActionTypeMap = map[int64]PermissionActionType{
	0: PermissionActionTypeAll,
	1: PermissionActionTypeRead,
	2: PermissionActionTypeWrite,
	3: PermissionActionTypeDelete,
	4: PermissionActionTypeChangeState,
}

var sqlIntPermissionActionTypeValue = map[PermissionActionType]int64{
	PermissionActionTypeAll:         0,
	PermissionActionTypeRead:        1,
	PermissionActionTypeWrite:       2,
	PermissionActionTypeDelete:      3,
	PermissionActionTypeChangeState: 4,
}

func lookupSqlIntPermissionActionType(val int64) (PermissionActionType, error) {
	x, ok := sqlIntPermissionActionTypeMap[val]
	if !ok {
		return x, fmt.Errorf("%v is not %w", val, ErrInvalidPermissionActionType)
	}
	return x, nil
}

// Scan implements the Scanner interface.
func (x *PermissionActionType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = PermissionActionType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x, err = lookupSqlIntPermissionActionType(v)
	case string:
		*x, err = ParsePermissionActionType(v)
	case []byte:
		if val, verr := strconv.ParseInt(string(v), 10, 64); verr == nil {
			*x, err = lookupSqlIntPermissionActionType(val)
		} else {
			// try parsing the value as a string
			*x, err = ParsePermissionActionType(string(v))
		}
	case PermissionActionType:
		*x = v
	case int:
		*x, err = lookupSqlIntPermissionActionType(int64(v))
	case *PermissionActionType:
		if v == nil {
			return errPermissionActionTypeNilPtr
		}
		*x = *v
	case uint:
		*x, err = lookupSqlIntPermissionActionType(int64(v))
	case uint64:
		*x, err = lookupSqlIntPermissionActionType(int64(v))
	case *int:
		if v == nil {
			return errPermissionActionTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionActionType(int64(*v))
	case *int64:
		if v == nil {
			return errPermissionActionTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionActionType(int64(*v))
	case float64: // json marshals everything as a float64 if it's a number
		*x, err = lookupSqlIntPermissionActionType(int64(v))
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errPermissionActionTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionActionType(int64(*v))
	case *uint:
		if v == nil {
			return errPermissionActionTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionActionType(int64(*v))
	case *uint64:
		if v == nil {
			return errPermissionActionTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionActionType(int64(*v))
	case *string:
		if v == nil {
			return errPermissionActionTypeNilPtr
		}
		*x, err = ParsePermissionActionType(*v)
	default:
		return errors.New("invalid type for PermissionActionType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x PermissionActionType) Value() (driver.Value, error) {
	val, ok := sqlIntPermissionActionTypeValue[x]
	if !ok {
		return nil, ErrInvalidPermissionActionType
	}
	return int64(val), nil
}

const (
	// PermissionTargetTypeAll is a PermissionTargetType of type all.
	PermissionTargetTypeAll PermissionTargetType = "all"
	// PermissionTargetTypeUsers is a PermissionTargetType of type users.
	PermissionTargetTypeUsers PermissionTargetType = "users"
	// PermissionTargetTypeUserGroups is a PermissionTargetType of type user_groups.
	PermissionTargetTypeUserGroups PermissionTargetType = "user_groups"
	// PermissionTargetTypeProjects is a PermissionTargetType of type projects.
	PermissionTargetTypeProjects PermissionTargetType = "projects"
	// PermissionTargetTypeProjectIssues is a PermissionTargetType of type project_issues.
	PermissionTargetTypeProjectIssues PermissionTargetType = "project_issues"
	// PermissionTargetTypeProjectAssignees is a PermissionTargetType of type project_assignees.
	PermissionTargetTypeProjectAssignees PermissionTargetType = "project_assignees"
	// PermissionTargetTypeLeaveDayRequests is a PermissionTargetType of type leave_day_requests.
	PermissionTargetTypeLeaveDayRequests PermissionTargetType = "leave_day_requests"
	// PermissionTargetTypeClients is a PermissionTargetType of type clients.
	PermissionTargetTypeClients PermissionTargetType = "clients"
	// PermissionTargetTypeIssueStatuses is a PermissionTargetType of type issue_statuses.
	PermissionTargetTypeIssueStatuses PermissionTargetType = "issue_statuses"
	// PermissionTargetTypeDevices is a PermissionTargetType of type devices.
	PermissionTargetTypeDevices PermissionTargetType = "devices"
	// PermissionTargetTypeTimesheetTemplates is a PermissionTargetType of type timesheet_templates.
	PermissionTargetTypeTimesheetTemplates PermissionTargetType = "timesheet_templates"
	// PermissionTargetTypeAttendances is a PermissionTargetType of type attendances.
	PermissionTargetTypeAttendances PermissionTargetType = "attendances"
)

var ErrInvalidPermissionTargetType = errors.New("not a valid PermissionTargetType")

// String implements the Stringer interface.
func (x PermissionTargetType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PermissionTargetType) IsValid() bool {
	_, err := ParsePermissionTargetType(string(x))
	return err == nil
}

var _PermissionTargetTypeValue = map[string]PermissionTargetType{
	"all":                 PermissionTargetTypeAll,
	"users":               PermissionTargetTypeUsers,
	"user_groups":         PermissionTargetTypeUserGroups,
	"projects":            PermissionTargetTypeProjects,
	"project_issues":      PermissionTargetTypeProjectIssues,
	"project_assignees":   PermissionTargetTypeProjectAssignees,
	"leave_day_requests":  PermissionTargetTypeLeaveDayRequests,
	"clients":             PermissionTargetTypeClients,
	"issue_statuses":      PermissionTargetTypeIssueStatuses,
	"devices":             PermissionTargetTypeDevices,
	"timesheet_templates": PermissionTargetTypeTimesheetTemplates,
	"attendances":         PermissionTargetTypeAttendances,
}

// ParsePermissionTargetType attempts to convert a string to a PermissionTargetType.
func ParsePermissionTargetType(name string) (PermissionTargetType, error) {
	if x, ok := _PermissionTargetTypeValue[name]; ok {
		return x, nil
	}
	return PermissionTargetType(""), fmt.Errorf("%s is %w", name, ErrInvalidPermissionTargetType)
}

// MarshalText implements the text marshaller method.
func (x PermissionTargetType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PermissionTargetType) UnmarshalText(text []byte) error {
	tmp, err := ParsePermissionTargetType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errPermissionTargetTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

var sqlIntPermissionTargetTypeMap = map[int64]PermissionTargetType{
	0:  PermissionTargetTypeAll,
	1:  PermissionTargetTypeUsers,
	2:  PermissionTargetTypeUserGroups,
	3:  PermissionTargetTypeProjects,
	4:  PermissionTargetTypeProjectIssues,
	5:  PermissionTargetTypeProjectAssignees,
	6:  PermissionTargetTypeLeaveDayRequests,
	7:  PermissionTargetTypeClients,
	8:  PermissionTargetTypeIssueStatuses,
	9:  PermissionTargetTypeDevices,
	10: PermissionTargetTypeTimesheetTemplates,
	11: PermissionTargetTypeAttendances,
}

var sqlIntPermissionTargetTypeValue = map[PermissionTargetType]int64{
	PermissionTargetTypeAll:                0,
	PermissionTargetTypeUsers:              1,
	PermissionTargetTypeUserGroups:         2,
	PermissionTargetTypeProjects:           3,
	PermissionTargetTypeProjectIssues:      4,
	PermissionTargetTypeProjectAssignees:   5,
	PermissionTargetTypeLeaveDayRequests:   6,
	PermissionTargetTypeClients:            7,
	PermissionTargetTypeIssueStatuses:      8,
	PermissionTargetTypeDevices:            9,
	PermissionTargetTypeTimesheetTemplates: 10,
	PermissionTargetTypeAttendances:        11,
}

func lookupSqlIntPermissionTargetType(val int64) (PermissionTargetType, error) {
	x, ok := sqlIntPermissionTargetTypeMap[val]
	if !ok {
		return x, fmt.Errorf("%v is not %w", val, ErrInvalidPermissionTargetType)
	}
	return x, nil
}

// Scan implements the Scanner interface.
func (x *PermissionTargetType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = PermissionTargetType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x, err = lookupSqlIntPermissionTargetType(v)
	case string:
		*x, err = ParsePermissionTargetType(v)
	case []byte:
		if val, verr := strconv.ParseInt(string(v), 10, 64); verr == nil {
			*x, err = lookupSqlIntPermissionTargetType(val)
		} else {
			// try parsing the value as a string
			*x, err = ParsePermissionTargetType(string(v))
		}
	case PermissionTargetType:
		*x = v
	case int:
		*x, err = lookupSqlIntPermissionTargetType(int64(v))
	case *PermissionTargetType:
		if v == nil {
			return errPermissionTargetTypeNilPtr
		}
		*x = *v
	case uint:
		*x, err = lookupSqlIntPermissionTargetType(int64(v))
	case uint64:
		*x, err = lookupSqlIntPermissionTargetType(int64(v))
	case *int:
		if v == nil {
			return errPermissionTargetTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionTargetType(int64(*v))
	case *int64:
		if v == nil {
			return errPermissionTargetTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionTargetType(int64(*v))
	case float64: // json marshals everything as a float64 if it's a number
		*x, err = lookupSqlIntPermissionTargetType(int64(v))
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errPermissionTargetTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionTargetType(int64(*v))
	case *uint:
		if v == nil {
			return errPermissionTargetTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionTargetType(int64(*v))
	case *uint64:
		if v == nil {
			return errPermissionTargetTypeNilPtr
		}
		*x, err = lookupSqlIntPermissionTargetType(int64(*v))
	case *string:
		if v == nil {
			return errPermissionTargetTypeNilPtr
		}
		*x, err = ParsePermissionTargetType(*v)
	default:
		return errors.New("invalid type for PermissionTargetType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x PermissionTargetType) Value() (driver.Value, error) {
	val, ok := sqlIntPermissionTargetTypeValue[x]
	if !ok {
		return nil, ErrInvalidPermissionTargetType
	}
	return int64(val), nil
}
