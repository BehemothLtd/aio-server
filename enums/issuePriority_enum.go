// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strconv"
)

const (
	// IssuePriorityLowest is a IssuePriority of type lowest.
	IssuePriorityLowest IssuePriority = "lowest"
	// IssuePriorityLow is a IssuePriority of type low.
	IssuePriorityLow IssuePriority = "low"
	// IssuePriorityNormal is a IssuePriority of type normal.
	IssuePriorityNormal IssuePriority = "normal"
	// IssuePriorityHigh is a IssuePriority of type high.
	IssuePriorityHigh IssuePriority = "high"
	// IssuePriorityHighest is a IssuePriority of type highest.
	IssuePriorityHighest IssuePriority = "highest"
)

var ErrInvalidIssuePriority = errors.New("not a valid IssuePriority")

// String implements the Stringer interface.
func (x IssuePriority) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IssuePriority) IsValid() bool {
	_, err := ParseIssuePriority(string(x))
	return err == nil
}

var _IssuePriorityValue = map[string]IssuePriority{
	"lowest":  IssuePriorityLowest,
	"low":     IssuePriorityLow,
	"normal":  IssuePriorityNormal,
	"high":    IssuePriorityHigh,
	"highest": IssuePriorityHighest,
}

// ParseIssuePriority attempts to convert a string to a IssuePriority.
func ParseIssuePriority(name string) (IssuePriority, error) {
	if x, ok := _IssuePriorityValue[name]; ok {
		return x, nil
	}
	return IssuePriority(""), fmt.Errorf("%s is %w", name, ErrInvalidIssuePriority)
}

// MarshalText implements the text marshaller method.
func (x IssuePriority) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *IssuePriority) UnmarshalText(text []byte) error {
	tmp, err := ParseIssuePriority(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errIssuePriorityNilPtr = errors.New("value pointer is nil") // one per type for package clashes

var sqlIntIssuePriorityMap = map[int64]IssuePriority{
	1: IssuePriorityLowest,
	2: IssuePriorityLow,
	3: IssuePriorityNormal,
	4: IssuePriorityHigh,
	5: IssuePriorityHighest,
}

var sqlIntIssuePriorityValue = map[IssuePriority]int64{
	IssuePriorityLowest:  1,
	IssuePriorityLow:     2,
	IssuePriorityNormal:  3,
	IssuePriorityHigh:    4,
	IssuePriorityHighest: 5,
}

func lookupSqlIntIssuePriority(val int64) (IssuePriority, error) {
	x, ok := sqlIntIssuePriorityMap[val]
	if !ok {
		return x, fmt.Errorf("%v is not %w", val, ErrInvalidIssuePriority)
	}
	return x, nil
}

// Scan implements the Scanner interface.
func (x *IssuePriority) Scan(value interface{}) (err error) {
	if value == nil {
		*x = IssuePriority("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x, err = lookupSqlIntIssuePriority(v)
	case string:
		*x, err = ParseIssuePriority(v)
	case []byte:
		if val, verr := strconv.ParseInt(string(v), 10, 64); verr == nil {
			*x, err = lookupSqlIntIssuePriority(val)
		} else {
			// try parsing the value as a string
			*x, err = ParseIssuePriority(string(v))
		}
	case IssuePriority:
		*x = v
	case int:
		*x, err = lookupSqlIntIssuePriority(int64(v))
	case *IssuePriority:
		if v == nil {
			return errIssuePriorityNilPtr
		}
		*x = *v
	case uint:
		*x, err = lookupSqlIntIssuePriority(int64(v))
	case uint64:
		*x, err = lookupSqlIntIssuePriority(int64(v))
	case *int:
		if v == nil {
			return errIssuePriorityNilPtr
		}
		*x, err = lookupSqlIntIssuePriority(int64(*v))
	case *int64:
		if v == nil {
			return errIssuePriorityNilPtr
		}
		*x, err = lookupSqlIntIssuePriority(int64(*v))
	case float64: // json marshals everything as a float64 if it's a number
		*x, err = lookupSqlIntIssuePriority(int64(v))
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errIssuePriorityNilPtr
		}
		*x, err = lookupSqlIntIssuePriority(int64(*v))
	case *uint:
		if v == nil {
			return errIssuePriorityNilPtr
		}
		*x, err = lookupSqlIntIssuePriority(int64(*v))
	case *uint64:
		if v == nil {
			return errIssuePriorityNilPtr
		}
		*x, err = lookupSqlIntIssuePriority(int64(*v))
	case *string:
		if v == nil {
			return errIssuePriorityNilPtr
		}
		*x, err = ParseIssuePriority(*v)
	default:
		return errors.New("invalid type for IssuePriority")
	}

	return
}

// Value implements the driver Valuer interface.
func (x IssuePriority) Value() (driver.Value, error) {
	val, ok := sqlIntIssuePriorityValue[x]
	if !ok {
		return nil, ErrInvalidIssuePriority
	}
	return int64(val), nil
}
